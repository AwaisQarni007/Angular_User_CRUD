{"ast":null,"code":"var _class;\nimport { throwError } from 'rxjs';\nimport { catchError } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nclass UserService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http://localhost:3000/users'; // Replace this with the actual API endpoint or JSON file path\n  }\n\n  getUsers() {\n    return this.http.get(this.apiUrl).pipe(catchError(error => {\n      console.error('Error fetching users:', error);\n      return throwError(error);\n    }));\n  }\n  addUser(newUser) {\n    // Assuming your API supports POST method for adding a new user\n    return this.http.post(this.apiUrl, newUser);\n  }\n  updateUser(updatedUser) {\n    // Assuming your API supports PUT method for updating an existing user\n    return this.http.put(`${this.apiUrl}/${updatedUser.id}`, updatedUser);\n  }\n  deleteUser(userId) {\n    // Assuming your API supports DELETE method for deleting a user by ID\n    return this.http.delete(`${this.apiUrl}/${userId}`);\n  }\n}\n_class = UserService;\n_class.ɵfac = function UserService_Factory(t) {\n  return new (t || _class)(i0.ɵɵinject(i1.HttpClient));\n};\n_class.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: _class,\n  factory: _class.ɵfac,\n  providedIn: 'root'\n});\nexport { UserService };","map":{"version":3,"names":["throwError","catchError","UserService","constructor","http","apiUrl","getUsers","get","pipe","error","console","addUser","newUser","post","updateUser","updatedUser","put","id","deleteUser","userId","delete","i0","ɵɵinject","i1","HttpClient","factory","ɵfac","providedIn"],"sources":["C:\\Users\\PC\\Desktop\\Angular Demo\\angular\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable, throwError } from 'rxjs';\r\nimport { catchError } from 'rxjs/operators';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class UserService {\r\n  private apiUrl = 'http://localhost:3000/users'; // Replace this with the actual API endpoint or JSON file path\r\n\r\n  constructor(private http: HttpClient) {}\r\n\r\n  getUsers(): Observable<any[]> {\r\n    return this.http.get<any[]>(this.apiUrl)\r\n      .pipe(\r\n        catchError(error => {\r\n          console.error('Error fetching users:', error);\r\n          return throwError(error);\r\n        })\r\n      );\r\n  }\r\n\r\n  addUser(newUser: any): Observable<any> {\r\n    // Assuming your API supports POST method for adding a new user\r\n    return this.http.post<any>(this.apiUrl, newUser);\r\n  }\r\n\r\n  updateUser(updatedUser: any): Observable<any> {\r\n    // Assuming your API supports PUT method for updating an existing user\r\n    return this.http.put<any>(`${this.apiUrl}/${updatedUser.id}`, updatedUser);\r\n  }\r\n\r\n  deleteUser(userId: number): Observable<any> {\r\n    // Assuming your API supports DELETE method for deleting a user by ID\r\n    return this.http.delete<any>(`${this.apiUrl}/${userId}`);\r\n  }\r\n}\r\n"],"mappings":";AAEA,SAAqBA,UAAU,QAAQ,MAAM;AAC7C,SAASC,UAAU,QAAQ,gBAAgB;;;AAE3C,MAGaC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,6BAA6B,CAAC,CAAC;EAET;;EAEvCC,QAAQA,CAAA;IACN,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAQ,IAAI,CAACF,MAAM,CAAC,CACrCG,IAAI,CACHP,UAAU,CAACQ,KAAK,IAAG;MACjBC,OAAO,CAACD,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,OAAOT,UAAU,CAACS,KAAK,CAAC;IAC1B,CAAC,CAAC,CACH;EACL;EAEAE,OAAOA,CAACC,OAAY;IAClB;IACA,OAAO,IAAI,CAACR,IAAI,CAACS,IAAI,CAAM,IAAI,CAACR,MAAM,EAAEO,OAAO,CAAC;EAClD;EAEAE,UAAUA,CAACC,WAAgB;IACzB;IACA,OAAO,IAAI,CAACX,IAAI,CAACY,GAAG,CAAM,GAAG,IAAI,CAACX,MAAM,IAAIU,WAAW,CAACE,EAAE,EAAE,EAAEF,WAAW,CAAC;EAC5E;EAEAG,UAAUA,CAACC,MAAc;IACvB;IACA,OAAO,IAAI,CAACf,IAAI,CAACgB,MAAM,CAAM,GAAG,IAAI,CAACf,MAAM,IAAIc,MAAM,EAAE,CAAC;EAC1D;;SA5BWjB,WAAW;;mBAAXA,MAAW,EAAAmB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;AAAA;;SAAXtB,MAAW;EAAAuB,OAAA,EAAXvB,MAAW,CAAAwB,IAAA;EAAAC,UAAA,EAFV;AAAM;SAEPzB,WAAW"},"metadata":{},"sourceType":"module","externalDependencies":[]}